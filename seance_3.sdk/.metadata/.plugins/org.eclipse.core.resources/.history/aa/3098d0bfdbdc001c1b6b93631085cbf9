

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#include "xstatus.h"
#include "xgpio.h"
#include "xtmrctr.h"
//#include "xintc.h"
#include "xil_exception.h"
//#include "microblaze_sleep.h"
#include <xil_io.h>							// Contains Xil_Out8 and its variations
#include "timer.h"


//XIntc xintc;  /* The instance of the Interrupt Controller */
XTmrCtr TimerInst;   /* The instance of the Timer Counter */

/*======================================================================== */


// Fonction d'initialisation du Timer
int init_timer(void)
{
	int Status;

	/*
	 * Initialize the timer counter so that it's ready to use,
	 * specify the device ID that is generated in xparameters.h
	 */
	Status = XTmrCtr_Initialize(&TimerInst, TMRCTR_DEVICE_ID);
	if (Status != XST_SUCCESS) { return XST_FAILURE;}

	/*
	 * Setup the handler for the timer counter that will be called from the
	 * interrupt context when the timer expires, specify a pointer to the
	 * timer counter driver instance as the callback reference so the handler
	 * is able to access the instance data
	 */
	XTmrCtr_SetHandler(&TimerInst, Timer_ISR_Handler, &TimerInst);

	/*
	 * Enable the interrupt of the timer counter so interrupts will occur
	 * and use auto reload mode such that the timer counter will reload
	 * itself automatically and continue repeatedly, without this option
	 * it would expire once only
	 */
	XTmrCtr_SetOptions(&TimerInst, TIMER_CNTR,	XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION | XTC_DOWN_COUNT_OPTION); // A COMPLETER POUR COMPTEUR EN DECREMENTATION


	//XTC_DOWN_COUNT_OPTION
	//XTC_INT_MODE_OPTION

	/*
	 * Set a reset value for the timer counter such that it will expire
	 * eariler than letting it roll over from 0, the reset value is loaded
	 * into the timer counter when it is started
	 */
	XTmrCtr_SetResetValue(&TimerInst, TIMER_CNTR, RESET_VALUE);

	/*
	 * Start the timer counter such that it's incrementing by default,
	 * then wait for it to timeout a number of times
	 */
	XTmrCtr_Start(&TimerInst, TIMER_CNTR);

	return XST_SUCCESS;
}

void Timer_ISR_Handler(void *CallBackRef, u8 TmrCtrNumber)
{
		static int TimerExpired = 0;
		TimerExpired++;
		xil_printf("Interrupt %d\n", TimerExpired);
		animer_message();
}

int init_interrupts(void)
{
	 int Status;

	/*
	 * Initialize the interrupt controller driver so that
	 * it's ready to use, specify the device ID that is generated in
	 * xparameters.h
	 */
	Status = XIntc_Initialize(&xintc, INTC_DEVICE_ID);
	if (Status != XST_SUCCESS) return XST_FAILURE;

	/*
	 * Connect a device driver handler that will be called when an interrupt
	 * for the device occurs, the device driver handler performs the specific
	 * interrupt processing for the device
	 */
	Status = XIntc_Connect(&xintc, TMRCTR_INTERRUPT_ID,	(XInterruptHandler)XTmrCtr_InterruptHandler,(void *)&TimerInst);
	if (Status != XST_SUCCESS) return XST_FAILURE;

	/*
	 * Start the interrupt controller such that interrupts are enabled for
	 * all devices that cause interrupts, specific real mode so that
	 * the timer counter can cause interrupts thru the interrupt controller.
	 */
	Status = XIntc_Start(&xintc, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) return XST_FAILURE;

	/*
	 * Enable the interrupt for the timer counter
	 */
	XIntc_Enable(&xintc, TMRCTR_INTERRUPT_ID);

	/*
	 * Initialize the exception table.
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler) XIntc_InterruptHandler, &xintc);

	/*
	 * Enable non-critical exceptions.
	 */
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}
